/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and restricts write access to internships and FAQs to admins only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user with the matching userId can read and write their profile.
 * - /internships/{internshipId}: Stores internship opportunities. Publicly readable, but only admins can create, update, or delete.
 * - /faqs/{faqId}: Stores frequently asked questions. Publicly readable, but only admins can create, update, or delete.
 * - /users/{userId}/portfolio/{portfolioId}: Stores user portfolio items. Only the user with the matching userId can read and write their portfolio items.
 *
 * Key Security Decisions:
 * - User profiles are private; only the owner can read or write.
 * - Listing of all users is disallowed.
 * - Internships and FAQs are publicly readable to facilitate discovery.
 * - Admin role is not currently enforced (TODO).
 *
 * Denormalization for Authorization:
 * - The `users/{userId}` path enforces ownership by matching the `userId` parameter to the authenticated user's `uid`. The `create` operation validates that `request.resource.data.id` also matches the `userId` to prevent spoofing. The `update` operation validates that the user ID cannot be changed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their profile.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     *   Request: auth.uid = 'user456', resource.data.id = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete user 'user123' profile.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to internship documents.
     * @path /internships/{internshipId}
     * @allow (get, list) Anyone can read internship details.
     * @deny (create, update, delete) Only admins can create, update, or delete internships.
     * @principle Public read access with restricted write access for admins.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to FAQ documents.
     * @path /faqs/{faqId}
     * @allow (get, list) Anyone can read FAQs.
     * @deny (create, update, delete) Only admins can create, update, or delete FAQs.
     * @principle Public read access with restricted write access for admins.
     */
    match /faqs/{faqId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

     /**
      * @description Controls access to portfolio documents under a user.
      * @path /users/{userId}/portfolio/{portfolioId}
      * @allow (get, list) User with ID 'user123' can read their portfolio.
      *   Request: auth.uid = 'user123'
      * @allow (create, update, delete) User with ID 'user123' can create, update, or delete their portfolio.
      *   Request: auth.uid = 'user123'
      * @deny (get, list, create, update, delete) User with ID 'user456' cannot read, create, update, or delete user 'user123' portfolio.
      *   Request: auth.uid = 'user456'
      * @principle Enforces document ownership for all operations on a user's portfolio.
      */
    match /users/{userId}/portfolio/{portfolioId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to candidate documents under a user.
     * @path /users/{userId}/candidates/{candidateId}
     * @allow (get, list) User with ID 'user123' can read their candidate profiles.
     *   Request: auth.uid = 'user123'
     * @allow (create, update, delete) User with ID 'user123' can create, update, or delete their candidate profiles.
     *   Request: auth.uid = 'user123'
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot read, create, update, or delete user 'user123' candidate profiles.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations on a user's candidate profiles.
     */
    match /users/{userId}/candidates/{candidateId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to recommendation documents under a candidate.
     * @path /users/{userId}/candidates/{candidateId}/recommendations/{recommendationId}
     * @allow (get, list) User with ID 'user123' can read recommendations for their candidate profiles.
     *   Request: auth.uid = 'user123'
     * @allow (create, update, delete) User with ID 'user123' can create, update, or delete recommendations for their candidate profiles.
     *   Request: auth.uid = 'user123'
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot read, create, update, or delete recommendations for user 'user123' candidate profiles.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations on recommendations under a user's candidate profiles.
     */
    match /users/{userId}/candidates/{candidateId}/recommendations/{recommendationId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Controls access to chatmessage documents under a user.
      * @path /users/{userId}/chatmessages/{chatmessageId}
      * @allow (get, list) User with ID 'user123' can read their chatmessages.
      *   Request: auth.uid = 'user123'
      * @allow (create, update, delete) User with ID 'user123' can create, update, or delete their chatmessages.
      *   Request: auth.uid = 'user123'
      * @deny (get, list, create, update, delete) User with ID 'user456' cannot read, create, update, or delete user 'user123' chatmessages.
      *   Request: auth.uid = 'user456'
      * @principle Enforces document ownership for all operations on a user's chatmessages.
      */
    match /users/{userId}/chatmessages/{chatmessageId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }



    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}